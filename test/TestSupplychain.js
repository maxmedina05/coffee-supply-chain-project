const truffleAssert = require('truffle-assertions')
// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  var sku = 1
  var upc = 1
  const ownerID = accounts[0]
  const originFarmerID = accounts[1]
  const originFarmName = 'John Doe'
  const originFarmInformation = 'Yarray Valley'
  const originFarmLatitude = '-38.239770'
  const originFarmLongitude = '144.341490'
  var productID = sku + upc
  const productNotes = 'Best beans for Espresso'
  const productPrice = web3.utils.toWei('5', 'ether')
  var itemState = 0
  const distributorID = accounts[2]
  const retailerID = accounts[3]
  const consumerID = accounts[4]
  const emptyAddress = '0x00000000000000000000000000000000000000'

  ///Available Accounts
  ///==================
  ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
  ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
  ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
  ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
  ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
  ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
  ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
  ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
  ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
  ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

  console.log('ganache-cli accounts used here...')
  console.log('Contract Owner: accounts[0] ', accounts[0])
  console.log('Farmer: accounts[1] ', accounts[1])
  console.log('Distributor: accounts[2] ', accounts[2])
  console.log('Retailer: accounts[3] ', accounts[3])
  console.log('Consumer: accounts[4] ', accounts[4])

  // 1st Test
  it('Testing smart contract function harvestItem() that allows a farmer to harvest coffee', async () => {
    const supplyChain = await SupplyChain.deployed()
    await supplyChain.addFarmer(originFarmerID)

    // Declare and Initialize a variable for event
    // var eventEmitted = false

    // Watch the emitted event Harvested()
    // var event = supplyChain.Harvested()

    // await event.watch((err, res) => {
    //     eventEmitted = true
    // })

    // Mark an item as Harvested by calling function harvestItem()
    const result = await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes,
      {
        from: originFarmerID
      }
    )

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(
      resultBufferOne[2],
      originFarmerID,
      'Error: Missing or Invalid ownerID',
    )
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      'Error: Missing or Invalid originFarmerID',
    )
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      'Error: Missing or Invalid originFarmName',
    )
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      'Error: Missing or Invalid originFarmInformation',
    )
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      'Error: Missing or Invalid originFarmLatitude',
    )
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      'Error: Missing or Invalid originFarmLongitude',
    )
    assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
    assert.equal(result.logs[0].event, 'Harvested', 'Invalid event emitted')
  })

  // 2nd Test
  it('Testing smart contract function processItem() that allows a farmer to process coffee', async () => {
    const supplyChain = await SupplyChain.deployed()

    // Mark an item as Processed by calling function processtItem()
    const result = await supplyChain.processItem(upc, { from: originFarmerID })
    itemState += 1

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBuffer = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(result.logs[0].event, 'Processed')
    assert.equal(resultBuffer[5], itemState)
  })

  // 3rd Test
  it('Testing smart contract function packItem() that allows a farmer to pack coffee', async () => {
    const supplyChain = await SupplyChain.deployed()

    // Mark an item as Packed by calling function packItem()
    const result = await supplyChain.packItem(upc, { from: originFarmerID })

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBuffer = await supplyChain.fetchItemBufferTwo.call(upc)
    itemState += 1

    // Verify the result set
    assert.equal(result.logs[0].event, 'Packed')
    assert.equal(resultBuffer[5], itemState)
  })

  // 4th Test
  it('Testing smart contract function sellItem() that allows a farmer to sell coffee', async () => {
    const supplyChain = await SupplyChain.deployed()

    // Mark an item as ForSale by calling function sellItem()
    const result = await supplyChain.sellItem(upc, productPrice, {
      from: originFarmerID,
    })

    itemState += 1

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBuffer = await supplyChain.fetchItemBufferTwo.call(upc)
    // Verify the result set
    assert.equal(result.logs[0].event, 'ForSale')
    assert.equal(resultBuffer[5], itemState)
    assert.equal()
  })

  // 5th Test
  it('Testing smart contract function buyItem() that allows a distributor to buy coffee', async () => {
    const supplyChain = await SupplyChain.deployed()
    await supplyChain.addDistributor(distributorID)
    // const farmerBalanceBeforeTransaction = await web3.eth.getBalance(originFarmerID)
    // const distributorBalanceBeforeTransaction = await web3.eth.getBalance(distributorID)

    // console.log('farmerBalanceBeforeTransaction:', farmerBalanceBeforeTransaction)
    // console.log('distributorBalanceBeforeTransaction:', distributorBalanceBeforeTransaction)

    // Mark an item as Sold by calling function buyItem()
    const result = await supplyChain.buyItem(upc, {
      from: distributorID,
      value: productPrice,
    })

    itemState += 1

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBuffer = await supplyChain.fetchItemBufferTwo.call(upc)

    // const farmerBalance = await web3.eth.getBalance(originFarmerID)
    // const distributorBalance = await web3.eth.getBalance(distributorID)

    // Verify the result set
    assert.equal(result.logs[0].event, 'Sold')
    assert.equal(resultBuffer[5], itemState)
    // assert.equal(Number(farmerBalance), Number(farmerBalanceBeforeTransaction) - Number(productID))
    // assert.equal(Number(distributorBalance), Number(distributorBalanceBeforeTransaction) - Number(productID))
  })

  // 6th Test
  it('Testing smart contract function shipItem() that allows a distributor to ship coffee', async () => {
    const supplyChain = await SupplyChain.deployed()

    // Mark an item as Sold by calling function shipItem()
    const result = await supplyChain.shipItem(upc, {
      from: distributorID,
    })

    itemState += 1

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBuffer = await supplyChain.fetchItemBufferTwo.call(upc)
    // Verify the result set
    assert.equal(result.logs[0].event, 'Shipped')
    assert.equal(resultBuffer[5], itemState)
  })

  // 7th Test
  it('Testing smart contract function receiveItem() that allows a retailer to mark coffee received', async () => {
    const supplyChain = await SupplyChain.deployed()
    await supplyChain.addRetailer(retailerID)

    // Mark an item as Sold by calling function receiveItem()
    const result = await supplyChain.receiveItem(upc, {
      from: retailerID,
    })

    itemState += 1

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBuffer1 = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBuffer2 = await supplyChain.fetchItemBufferTwo.call(upc)
    // Verify the result set
    assert.equal(resultBuffer1[2], retailerID)
    assert.equal(result.logs[0].event, 'Received')
    assert.equal(resultBuffer2[5], 6)
  })

  // 8th Test
  it('Testing smart contract function purchaseItem() that allows a consumer to purchase coffee', async () => {
    const supplyChain = await SupplyChain.deployed()
    // Declare and Initialize a variable for event

    // Watch the emitted event Purchased()

    await supplyChain.addConsumer(consumerID)
    // Mark an item as Sold by calling function buyItem()
    const result = await supplyChain.purchaseItem(upc, {
      from: consumerID,
    })

    itemState += 1

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBuffer1 = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBuffer2 = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBuffer1[2], consumerID)
    assert.equal(result.logs[0].event, 'Purchased')
    assert.equal(resultBuffer2[5], 7)
  })

  // 9th Test
  it('Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain', async () => {
    const supplyChain = await SupplyChain.deployed()

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBuffer1 = await supplyChain.fetchItemBufferOne.call(upc)

    // Verify the result set:
    assert.equal(resultBuffer1[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBuffer1[1], upc, 'Error: Invalid item UPC')
    assert.equal(
      resultBuffer1[2],
      consumerID,
      'Error: Missing or Invalid ownerID',
    )
    assert.equal(
      resultBuffer1[3],
      originFarmerID,
      'Error: Missing or Invalid originFarmerID',
    )
    assert.equal(
      resultBuffer1[4],
      originFarmName,
      'Error: Missing or Invalid originFarmName',
    )
    assert.equal(
      resultBuffer1[5],
      originFarmInformation,
      'Error: Missing or Invalid originFarmInformation',
    )
    assert.equal(
      resultBuffer1[6],
      originFarmLatitude,
      'Error: Missing or Invalid originFarmLatitude',
    )
    assert.equal(
      resultBuffer1[7],
      originFarmLongitude,
      'Error: Missing or Invalid originFarmLongitude',
    )
  })

  // 10th Test
  it('Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain', async () => {
    const supplyChain = await SupplyChain.deployed()

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBuffer2 = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set:
    assert.equal(resultBuffer2[0], sku, 'Error: Invalid SKU')
    assert.equal(resultBuffer2[1], upc, 'Error: Invalid UPC')
    assert.equal(resultBuffer2[2], productID, 'Error: Invalid productID')
    assert.equal(resultBuffer2[3], productNotes, 'Error: Invalid productNotes')
    assert.equal(resultBuffer2[4], productPrice, 'Error: Invalid productPrice')
    assert.equal(resultBuffer2[5], itemState, 'Error: Invalid itemState')
    assert.equal(
      resultBuffer2[6],
      distributorID,
      'Error: Invalid distributorID',
    )
    assert.equal(resultBuffer2[7], retailerID, 'Error: Invalid retailerID')
    assert.equal(resultBuffer2[8], consumerID, 'Error: Invalid consumerID')
  })
})
